#!/usr/bin/env node

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

console.log('🚀 Nadar Development Pipeline (Simple Mode)...\n');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

let serverProcess = null;
let expoProcess = null;

// Cleanup function
function cleanup() {
  console.log('\n🧹 Cleaning up processes...');
  if (serverProcess) {
    serverProcess.kill();
    console.log('✅ Server stopped');
  }
  if (expoProcess) {
    expoProcess.kill();
    console.log('✅ Expo stopped');
  }
  rl.close();
  process.exit(0);
}

// Handle cleanup on exit
process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);

function updateAppConfig(ngrokUrl) {
  console.log(`📝 Updating app configuration to use: ${ngrokUrl}`);
  
  const envPath = path.join(__dirname, 'app', '.env');
  const envContent = `# Auto-generated by dev-tunnel-simple.js
EXPO_PUBLIC_API_BASE=${ngrokUrl}
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log('✅ App configuration updated');
}

function startServer() {
  console.log('🖥️  Starting server...');
  
  serverProcess = spawn('npm', ['run', 'dev'], {
    cwd: path.join(__dirname, 'server'),
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  serverProcess.stdout.on('data', (data) => {
    const output = data.toString();
    if (output.includes('listening on')) {
      console.log('✅ Server started successfully');
    }
    // Only show important server logs
    if (output.includes('✅') || output.includes('❌') || output.includes('listening')) {
      console.log('SERVER:', output.trim());
    }
  });
  
  serverProcess.stderr.on('data', (data) => {
    const error = data.toString();
    if (!error.includes('ValidationError') && !error.includes('trust proxy')) {
      console.log('SERVER ERROR:', error.trim());
    }
  });
}

function startExpo() {
  console.log('📱 Starting Expo with tunnel...');
  
  expoProcess = spawn('npx', ['expo', 'start', '--tunnel'], {
    cwd: path.join(__dirname, 'app'),
    stdio: ['ignore', 'pipe', 'pipe'],
    env: { ...process.env, FORCE_COLOR: '1' }
  });
  
  expoProcess.stdout.on('data', (data) => {
    const output = data.toString();
    console.log('EXPO:', output.trim());
  });
  
  expoProcess.stderr.on('data', (data) => {
    console.log('EXPO ERROR:', data.toString().trim());
  });
}

async function main() {
  console.log('🌐 Please start ngrok manually in another terminal:');
  console.log('   Run: ngrok http 4000');
  console.log('');
  
  rl.question('📝 Enter the ngrok HTTPS URL (e.g., https://abc123.ngrok.io): ', (ngrokUrl) => {
    if (!ngrokUrl || !ngrokUrl.startsWith('https://')) {
      console.log('❌ Invalid URL. Please provide a valid HTTPS ngrok URL.');
      rl.close();
      return;
    }
    
    // Remove trailing slash
    ngrokUrl = ngrokUrl.replace(/\/$/, '');
    
    console.log(`✅ Using ngrok URL: ${ngrokUrl}`);
    
    // Update app configuration
    updateAppConfig(ngrokUrl);
    
    // Start server
    startServer();
    
    // Wait a bit then start Expo
    setTimeout(() => {
      startExpo();
      
      console.log('\n🎉 Development pipeline ready!');
      console.log('📋 Summary:');
      console.log(`   🌐 Server tunnel: ${ngrokUrl}`);
      console.log('   🖥️  Server: Running on localhost:4000');
      console.log('   📱 Expo: Starting with tunnel mode');
      console.log('\n⏳ Wait for Expo QR code to appear, then scan to test!');
      console.log('💡 Press Ctrl+C to stop all services\n');
      
    }, 3000);
  });
}

main();
