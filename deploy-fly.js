#!/usr/bin/env node

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('🚀 Nadar Fly.io Deployment Pipeline...\n');

let expoProcess = null;

// Cleanup function
function cleanup() {
  console.log('\n🧹 Cleaning up processes...');
  if (expoProcess) {
    expoProcess.kill();
    console.log('✅ Expo stopped');
  }
  process.exit(0);
}

// Handle cleanup on exit
process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

function runCommand(command, cwd = process.cwd()) {
  return new Promise((resolve, reject) => {
    console.log(`🔧 Running: ${command}`);
    exec(command, { cwd }, (error, stdout, stderr) => {
      if (error) {
        console.error(`❌ Error: ${error.message}`);
        reject(error);
        return;
      }
      if (stderr) {
        console.log(`⚠️  ${stderr}`);
      }
      console.log(stdout);
      resolve(stdout);
    });
  });
}

async function deployToFly() {
  console.log('🌐 Deploying server to Fly.io...');
  
  try {
    // Check if fly CLI is installed
    await runCommand('fly version');
    
    // Set the Fly.io token
    process.env.FLY_API_TOKEN = 'FlyV1 fm2_lJPECAAAAAAACbadxBByu1BWuBkJm+nk8+lg871owrVodHRwczovL2FwaS5mbHkuaW8vdjGUAJLOABKy5x8Lk7lodHRwczovL2FwaS5mbHkuaW8vYWFhL3YxxDzphWIJYTSs2k60kU39ZWrU99o/J6Ms/fIUNGzHeX//APdWhOFtHdx/jNalCF2MzeeS7mcb9H976yVZimXEToSdCjOnusGNtcQV0x8ChPCVVewFLmPhwbV0nnnkyDyDUvZKUY0rn+bMfTuztLIsMWp4bdvyMp1+chEvuy5azu3qkpvwCNHo5lg1Uy93rcQgM19q4QF9fUPJBM6fTssQewF7SoUW9IHeEMUKBFXZTzg=';
    
    // Change to server directory
    const serverDir = path.join(__dirname, 'server');
    
    // Check if app exists, if not create it
    try {
      await runCommand('fly apps list | grep nadar-server', serverDir);
      console.log('✅ Fly.io app exists');
    } catch {
      console.log('📝 Creating new Fly.io app...');
      await runCommand('fly apps create nadar-server --generate-name', serverDir);
    }
    
    // Deploy the app
    console.log('🚀 Deploying to Fly.io...');
    await runCommand('fly deploy', serverDir);
    
    // Get the app URL
    const appInfo = await runCommand('fly status --json', serverDir);
    const status = JSON.parse(appInfo);
    const appUrl = `https://${status.Name}.fly.dev`;
    
    console.log(`✅ Deployment successful!`);
    console.log(`🌐 Server URL: ${appUrl}`);
    
    return appUrl;
    
  } catch (error) {
    console.error('❌ Deployment failed:', error.message);
    throw error;
  }
}

function updateAppConfig(serverUrl) {
  console.log(`📝 Updating app configuration to use: ${serverUrl}`);
  
  const envPath = path.join(__dirname, 'app', '.env');
  const envContent = `# Auto-generated by deploy-fly.js
EXPO_PUBLIC_API_BASE=${serverUrl}
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log('✅ App configuration updated');
}

function startExpo() {
  console.log('📱 Starting Expo with tunnel...');
  
  expoProcess = spawn('npx', ['expo', 'start', '--tunnel'], {
    cwd: path.join(__dirname, 'app'),
    stdio: ['ignore', 'pipe', 'pipe'],
    env: { ...process.env, FORCE_COLOR: '1' }
  });
  
  expoProcess.stdout.on('data', (data) => {
    const output = data.toString();
    console.log('EXPO:', output.trim());
  });
  
  expoProcess.stderr.on('data', (data) => {
    console.log('EXPO ERROR:', data.toString().trim());
  });
}

async function main() {
  try {
    // Step 1: Deploy to Fly.io
    const serverUrl = await deployToFly();
    
    // Step 2: Update app configuration
    updateAppConfig(serverUrl);
    
    // Step 3: Start Expo
    startExpo();
    
    console.log('\n🎉 Deployment pipeline complete!');
    console.log('📋 Summary:');
    console.log(`   🌐 Server: ${serverUrl}`);
    console.log('   📱 Expo: Starting with tunnel mode');
    console.log('\n⏳ Wait for Expo QR code to appear, then scan to test!');
    console.log('💡 Your server is now globally accessible!');
    console.log('💡 Press Ctrl+C to stop Expo (server will keep running)\n');
    
  } catch (error) {
    console.error('❌ Pipeline failed:', error.message);
    cleanup();
  }
}

main();
