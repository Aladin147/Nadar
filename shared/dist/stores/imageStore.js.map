{"version":3,"sources":["../../stores/imageStore.ts"],"sourcesContent":["// ImageStore implementations for different environments\n\nimport { ImageStore } from '../types/api';\n\n// In-memory implementation for Express server\nexport class MemoryImageStore implements ImageStore {\n  private cache = new Map<string, { buffer: Uint8Array; expires: number }>();\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    // Cleanup expired entries every minute\n    this.cleanupInterval = setInterval(() => {\n      const now = Date.now();\n      for (const [token, entry] of this.cache.entries()) {\n        if (entry.expires < now) {\n          this.cache.delete(token);\n        }\n      }\n    }, 60000);\n  }\n\n  async save(buffer: Uint8Array, ttlMinutes: number = 5): Promise<string> {\n    const token = `img-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const expires = Date.now() + (ttlMinutes * 60 * 1000);\n    \n    this.cache.set(token, { buffer, expires });\n    return token;\n  }\n\n  async get(token: string): Promise<Uint8Array | null> {\n    const entry = this.cache.get(token);\n    if (!entry) return null;\n    \n    if (entry.expires < Date.now()) {\n      this.cache.delete(token);\n      return null;\n    }\n    \n    return entry.buffer;\n  }\n\n  destroy(): void {\n    clearInterval(this.cleanupInterval);\n    this.cache.clear();\n  }\n}\n\n// Global cache implementation for Vercel (best-effort)\nexport class GlobalImageStore implements ImageStore {\n  private static cache = new Map<string, { buffer: Uint8Array; expires: number }>();\n\n  async save(buffer: Uint8Array, ttlMinutes: number = 5): Promise<string> {\n    const token = `img-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const expires = Date.now() + (ttlMinutes * 60 * 1000);\n    \n    // Best-effort global cache (may not persist across cold starts)\n    GlobalImageStore.cache.set(token, { buffer, expires });\n    return token;\n  }\n\n  async get(token: string): Promise<Uint8Array | null> {\n    const entry = GlobalImageStore.cache.get(token);\n    if (!entry) return null;\n    \n    if (entry.expires < Date.now()) {\n      GlobalImageStore.cache.delete(token);\n      return null;\n    }\n    \n    return entry.buffer;\n  }\n}\n\n// Vercel Blob implementation (for production)\nexport class VercelBlobImageStore implements ImageStore {\n  constructor(private blobToken: string) {}\n\n  async save(buffer: Uint8Array, ttlMinutes: number = 5): Promise<string> {\n    // TODO: Implement Vercel Blob storage\n    // For now, fall back to global cache\n    const fallback = new GlobalImageStore();\n    return fallback.save(buffer, ttlMinutes);\n  }\n\n  async get(token: string): Promise<Uint8Array | null> {\n    // TODO: Implement Vercel Blob retrieval\n    // For now, fall back to global cache\n    const fallback = new GlobalImageStore();\n    return fallback.get(token);\n  }\n}\n"],"mappings":";AAKO,IAAM,mBAAN,MAA6C;AAAA,EAC1C,QAAQ,oBAAI,IAAqD;AAAA,EACjE;AAAA,EAER,cAAc;AAEZ,SAAK,kBAAkB,YAAY,MAAM;AACvC,YAAM,MAAM,KAAK,IAAI;AACrB,iBAAW,CAAC,OAAO,KAAK,KAAK,KAAK,MAAM,QAAQ,GAAG;AACjD,YAAI,MAAM,UAAU,KAAK;AACvB,eAAK,MAAM,OAAO,KAAK;AAAA,QACzB;AAAA,MACF;AAAA,IACF,GAAG,GAAK;AAAA,EACV;AAAA,EAEA,MAAM,KAAK,QAAoB,aAAqB,GAAoB;AACtE,UAAM,QAAQ,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAC1E,UAAM,UAAU,KAAK,IAAI,IAAK,aAAa,KAAK;AAEhD,SAAK,MAAM,IAAI,OAAO,EAAE,QAAQ,QAAQ,CAAC;AACzC,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,IAAI,OAA2C;AACnD,UAAM,QAAQ,KAAK,MAAM,IAAI,KAAK;AAClC,QAAI,CAAC,MAAO,QAAO;AAEnB,QAAI,MAAM,UAAU,KAAK,IAAI,GAAG;AAC9B,WAAK,MAAM,OAAO,KAAK;AACvB,aAAO;AAAA,IACT;AAEA,WAAO,MAAM;AAAA,EACf;AAAA,EAEA,UAAgB;AACd,kBAAc,KAAK,eAAe;AAClC,SAAK,MAAM,MAAM;AAAA,EACnB;AACF;AAGO,IAAM,mBAAN,MAAM,kBAAuC;AAAA,EAClD,OAAe,QAAQ,oBAAI,IAAqD;AAAA,EAEhF,MAAM,KAAK,QAAoB,aAAqB,GAAoB;AACtE,UAAM,QAAQ,OAAO,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AAC1E,UAAM,UAAU,KAAK,IAAI,IAAK,aAAa,KAAK;AAGhD,sBAAiB,MAAM,IAAI,OAAO,EAAE,QAAQ,QAAQ,CAAC;AACrD,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,IAAI,OAA2C;AACnD,UAAM,QAAQ,kBAAiB,MAAM,IAAI,KAAK;AAC9C,QAAI,CAAC,MAAO,QAAO;AAEnB,QAAI,MAAM,UAAU,KAAK,IAAI,GAAG;AAC9B,wBAAiB,MAAM,OAAO,KAAK;AACnC,aAAO;AAAA,IACT;AAEA,WAAO,MAAM;AAAA,EACf;AACF;AAGO,IAAM,uBAAN,MAAiD;AAAA,EACtD,YAAoB,WAAmB;AAAnB;AAAA,EAAoB;AAAA,EAExC,MAAM,KAAK,QAAoB,aAAqB,GAAoB;AAGtE,UAAM,WAAW,IAAI,iBAAiB;AACtC,WAAO,SAAS,KAAK,QAAQ,UAAU;AAAA,EACzC;AAAA,EAEA,MAAM,IAAI,OAA2C;AAGnD,UAAM,WAAW,IAAI,iBAAiB;AACtC,WAAO,SAAS,IAAI,KAAK;AAAA,EAC3B;AACF;","names":[]}