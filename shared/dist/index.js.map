{"version":3,"sources":["../core/assistCore.ts","../adapters/expressAdapter.ts","../adapters/vercelAdapter.ts","../providers/geminiProvider.ts","../providers/telemetryProvider.ts","../stores/imageStore.ts"],"sourcesContent":["// Core business logic for assist endpoint - runtime agnostic\n\nimport { \n  AssistRequest, \n  AssistResponse, \n  AssistDeps, \n  Result, \n  ImageSignals,\n  ProviderError \n} from '../types/api';\n\nfunction createSystemPrompt(\n  language: string, \n  signals?: ImageSignals, \n  question?: string\n): string {\n  const langDir = language === 'ar' ? 'اكتب بالعربية الفصحى' : \n                  language === 'darija' ? 'اكتب بالدارجة المغربية' : \n                  'Write in English';\n\n  return `${langDir} You are نظر (Nadar), helping blind users navigate safely.\n\nFormat your response as a JSON object with exactly these fields:\n{\n  \"paragraph\": \"One short ${language === 'darija' ? 'Darija' : language} paragraph (≤2 sentences) with safety/next-step first\",\n  \"details\": [\"Additional detail 1\", \"Additional detail 2\", \"Additional detail 3\"],\n  \"has_text_content\": ${signals?.has_text ? 'true' : 'false'}\n}\n\nFor the paragraph:\n- Start with safety information or immediate next steps\n- Keep to maximum 2 sentences in ${language === 'darija' ? 'Darija' : language}\n- Be actionable and concise\n${question ? '- Answer the specific question first, then provide context' : ''}\n${signals?.has_text ? \n  '- IMPORTANT: Since text was detected, mention the visible text content prominently in your response' : \n  '- Focus on scene description and navigation guidance'}\n\nFor details array:\n- Provide 2-4 additional bullet points for \"More\" expansion\n- Include objects, navigation guidance, environmental context\n${signals?.has_text ? '- Include text-related details since text was detected' : ''}\n- Keep each detail concise but informative\n\nDon't identify people; avoid reading private screens; express uncertainty when unsure. Never use phrases like \"as you can see\" or \"if you look\".`;\n}\n\nfunction parseResponse(responseText: string): { paragraph: string; details: string[] } {\n  try {\n    // Remove markdown code blocks if present\n    let cleanedResponse = responseText.trim();\n    if (cleanedResponse.startsWith('```json')) {\n      cleanedResponse = cleanedResponse.replace(/^```json\\s*/, '').replace(/\\s*```$/, '');\n    } else if (cleanedResponse.startsWith('```')) {\n      cleanedResponse = cleanedResponse.replace(/^```\\s*/, '').replace(/\\s*```$/, '');\n    }\n    \n    const parsed = JSON.parse(cleanedResponse);\n    if (parsed.paragraph && Array.isArray(parsed.details)) {\n      return {\n        paragraph: parsed.paragraph,\n        details: parsed.details\n      };\n    }\n  } catch (parseError) {\n    console.warn('Failed to parse single-paragraph JSON response, using fallback:', responseText);\n  }\n  \n  return {\n    paragraph: responseText,\n    details: []\n  };\n}\n\nfunction createFollowupSuggestions(language: string): string[] {\n  return language === 'darija' ? [\n    'نقرا النص كامل؟',\n    'فين الممر الخالي؟',\n    'شنو كاين حداي؟'\n  ] : [\n    'Read all text?',\n    'Where is the clear path?',\n    'What is next to me?'\n  ];\n}\n\n// Core assist handler - pure business logic\nexport async function handleAssist(\n  request: AssistRequest,\n  deps: AssistDeps\n): Promise<Result<AssistResponse>> {\n  const startTime = deps.now();\n  \n  try {\n    // Resolve image\n    let image: Uint8Array;\n    if (request.image) {\n      image = request.image;\n    } else if (request.imageRef) {\n      const cachedImage = await deps.imageStore.get(request.imageRef);\n      if (!cachedImage) {\n        const error = {\n          message: `No cached image found for imageRef: ${request.imageRef}`,\n          err_code: 'IMAGE_NOT_FOUND'\n        };\n\n        // Log error telemetry\n        deps.telemetry.log({\n          ts: new Date().toISOString(),\n          mode: 'assist',\n          engine: 'gemini',\n          route_path: '/assist',\n          image_bytes: 0,\n          audio_bytes_in: 0,\n          total_ms: deps.now() - startTime,\n          model_ms: 0,\n          tts_ms: 0,\n          chars_out: 0,\n          ok: false,\n          err_code: error.err_code,\n          request_id: request.sessionId\n        });\n\n        return { ok: false, error };\n      }\n      image = cachedImage;\n    } else {\n      const error = {\n        message: 'No valid image provided',\n        err_code: 'INVALID_IMAGE'\n      };\n\n      // Log error telemetry\n      deps.telemetry.log({\n        ts: new Date().toISOString(),\n        mode: 'assist',\n        engine: 'gemini',\n        route_path: '/assist',\n        image_bytes: 0,\n        audio_bytes_in: 0,\n        total_ms: deps.now() - startTime,\n        model_ms: 0,\n        tts_ms: 0,\n        chars_out: 0,\n        ok: false,\n        err_code: error.err_code,\n        request_id: request.sessionId\n      });\n\n      return { ok: false, error };\n    }\n    \n    // Step 1: Fast image inspection\n    const inspectionStart = deps.now();\n    const signalsResult = await deps.providers.inspectImage(image, 'image/jpeg');\n    if (!signalsResult.ok) {\n      return signalsResult;\n    }\n    const signals = signalsResult.data;\n    const inspectionTime = deps.now() - inspectionStart;\n    \n    // Step 2: Generate response\n    const processingStart = deps.now();\n    const language = request.language || 'darija';\n    const systemPrompt = createSystemPrompt(language, signals, request.question);\n    \n    const defaultPrompt = request.question || (language === 'darija' \n      ? 'ساعدني نفهم شنو كاين فهاد الصورة'\n      : 'Help me understand what is in this image');\n    \n    const responseResult = await deps.providers.generateResponse(\n      image,\n      'image/jpeg',\n      `${systemPrompt}\\n\\nUser: ${defaultPrompt}`\n    );\n\n    if (!responseResult.ok) {\n      return responseResult;\n    }\n    \n    const processingTime = deps.now() - processingStart;\n    \n    // Parse response\n    const { paragraph, details } = parseResponse(responseResult.data);\n    \n    // Generate followup suggestions\n    const followup_suggest = createFollowupSuggestions(language);\n    \n    // Save image for potential reuse and generate followup token\n    const followupToken = await deps.imageStore.save(image, 5); // 5 minute TTL\n    \n    const totalTime = deps.now() - startTime;\n    \n    // Log telemetry\n    deps.telemetry.log({\n      ts: new Date().toISOString(),\n      mode: request.question ? 'qa' : 'describe',\n      engine: 'gemini',\n      route_path: '/assist',\n      image_bytes: image.length,\n      audio_bytes_in: 0,\n      total_ms: totalTime,\n      model_ms: processingTime,\n      tts_ms: 0,\n      chars_out: paragraph.length + details.join('').length,\n      signals: signals,\n      ok: true,\n      request_id: request.sessionId\n    });\n    \n    return {\n      ok: true,\n      data: {\n        speak: paragraph,\n        details,\n        signals,\n        followup_suggest,\n        followupToken,\n        timing: {\n          inspection_ms: inspectionTime,\n          processing_ms: processingTime,\n          total_ms: totalTime\n        }\n      }\n    };\n    \n  } catch (error: any) {\n    const totalTime = deps.now() - startTime;\n    \n    // Log error telemetry\n    deps.telemetry.log({\n      ts: new Date().toISOString(),\n      mode: 'assist',\n      engine: 'gemini',\n      route_path: '/assist',\n      image_bytes: 0,\n      audio_bytes_in: 0,\n      total_ms: totalTime,\n      model_ms: 0,\n      tts_ms: 0,\n      chars_out: 0,\n      ok: false,\n      err_code: error.err_code || 'UNKNOWN',\n      request_id: request.sessionId\n    });\n    \n    return {\n      ok: false,\n      error: {\n        message: error.message || 'Internal server error',\n        err_code: error.err_code || 'UNKNOWN',\n        details: error.details\n      }\n    };\n  }\n}\n","// Express adapter - maps Express req/res to core types\n\nimport type { Request, Response } from 'express';\nimport { AssistRequest, AssistDeps, RequestContext } from '../types/api';\nimport { handleAssist } from '../core/assistCore';\n\n// Convert Express request to core AssistRequest\nfunction mapExpressRequest(req: Request): AssistRequest {\n  const body = req.body;\n  \n  // Convert base64 image to Uint8Array if present\n  let image: Uint8Array | undefined;\n  if (body.imageBase64) {\n    image = new Uint8Array(Buffer.from(body.imageBase64, 'base64'));\n  }\n  \n  return {\n    sessionId: body.sessionId || `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    image,\n    imageRef: body.imageRef,\n    question: body.question,\n    language: body.options?.language || body.language || 'darija',\n    verbosity: body.options?.verbosity || body.verbosity || 'normal'\n  };\n}\n\n// Extract context from Express request\nfunction extractContext(req: Request): RequestContext {\n  return {\n    route_path: req.path,\n    remote_addr: req.ip || req.connection?.remoteAddress || 'unknown',\n    user_agent: req.headers['user-agent'] || 'unknown',\n    request_id: req.headers['x-request-id'] as string || `req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  };\n}\n\n// Express adapter for assist endpoint\nexport function createExpressAssistHandler(deps: AssistDeps) {\n  return async (req: Request, res: Response) => {\n    try {\n      const coreRequest = mapExpressRequest(req);\n      const result = await handleAssist(coreRequest, deps);\n      \n      if (result.ok) {\n        res.json(result.data);\n      } else {\n        const statusCode = result.error.err_code === 'VALIDATION_ERROR' ? 400 : 500;\n        res.status(statusCode).json({\n          error: result.error.message,\n          err_code: result.error.err_code,\n          details: result.error.details\n        });\n      }\n    } catch (error: any) {\n      res.status(500).json({\n        error: error.message || 'Internal server error',\n        err_code: 'UNKNOWN'\n      });\n    }\n  };\n}\n","// Vercel adapter - maps VercelRequest to core types\n\nimport type { VercelRequest, VercelResponse } from '@vercel/node';\nimport { AssistRequest, AssistDeps, RequestContext } from '../types/api';\nimport { handleAssist } from '../core/assistCore';\nimport { handleOCR, OCRRequest } from '../core/ocrCore';\nimport { handleTTS, TTSRequest, TTSDeps } from '../core/ttsCore';\n\n// Convert Vercel request to core AssistRequest\nfunction mapVercelRequest(req: VercelRequest): AssistRequest {\n  const body = req.body;\n\n  // Convert base64 image to Uint8Array if present\n  let image: Uint8Array | undefined;\n  if (body.imageBase64) {\n    image = new Uint8Array(Buffer.from(body.imageBase64, 'base64'));\n  }\n\n  return {\n    sessionId: body.sessionId || `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    image,\n    imageRef: body.imageRef,\n    question: body.question,\n    language: body.options?.language || body.language || 'darija',\n    verbosity: body.options?.verbosity || body.verbosity || 'normal'\n  };\n}\n\n// Extract context from Vercel request\nfunction extractContext(req: VercelRequest): RequestContext {\n  return {\n    route_path: req.url || 'unknown',\n    remote_addr: req.headers['x-forwarded-for'] as string || 'unknown',\n    user_agent: req.headers['user-agent'] || 'unknown',\n    request_id: req.headers['x-request-id'] as string || `req-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n  };\n}\n\n// Convert Vercel request to core OCRRequest\nfunction mapVercelOCRRequest(req: VercelRequest): OCRRequest {\n  const body = req.body;\n\n  // Convert base64 image to Uint8Array if present\n  let image: Uint8Array | undefined;\n  if (body.imageBase64) {\n    image = new Uint8Array(Buffer.from(body.imageBase64, 'base64'));\n  }\n\n  return {\n    sessionId: body.sessionId || `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    image,\n    imageRef: body.imageRef,\n    full: body.full || false,\n    language: body.options?.language || body.language || 'darija'\n  };\n}\n\n// Convert Vercel request to core TTSRequest\nfunction mapVercelTTSRequest(req: VercelRequest): TTSRequest {\n  const body = req.body;\n\n  return {\n    sessionId: body.sessionId || `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n    text: body.text,\n    voice: body.voice,\n    provider: body.provider || 'gemini',\n    rate: body.rate\n  };\n}\n\n// Vercel adapter for assist endpoint\nexport function createVercelAssistHandler(deps: AssistDeps) {\n  return async (req: VercelRequest, res: VercelResponse) => {\n    // Set headers\n    res.setHeader('cache-control', 'no-store');\n    res.setHeader('x-handler', 'shared-core');\n\n    // Check method\n    if (req.method !== 'POST') {\n      return res.status(405).json({\n        error: 'Method not allowed',\n        err_code: 'METHOD_NOT_ALLOWED'\n      });\n    }\n\n    try {\n      const coreRequest = mapVercelRequest(req);\n      const result = await handleAssist(coreRequest, deps);\n\n      if (result.ok) {\n        res.status(200).json(result.data);\n      } else {\n        const error = result.error;\n        const statusCode = error.err_code === 'VALIDATION_ERROR' ? 400 : 500;\n        res.status(statusCode).json({\n          error: error.message,\n          err_code: error.err_code,\n          details: error.details\n        });\n      }\n    } catch (error: any) {\n      res.status(500).json({\n        error: error.message || 'Internal server error',\n        err_code: 'UNKNOWN'\n      });\n    }\n  };\n}\n\n// Vercel adapter for OCR endpoint\nexport function createVercelOCRHandler(deps: AssistDeps) {\n  return async (req: VercelRequest, res: VercelResponse) => {\n    // Set headers\n    res.setHeader('cache-control', 'no-store');\n    res.setHeader('x-handler', 'shared-core');\n\n    // Check method\n    if (req.method !== 'POST') {\n      return res.status(405).json({\n        error: 'Method not allowed',\n        err_code: 'METHOD_NOT_ALLOWED'\n      });\n    }\n\n    try {\n      const coreRequest = mapVercelOCRRequest(req);\n      const result = await handleOCR(coreRequest, deps);\n\n      if (result.ok) {\n        res.status(200).json(result.data);\n      } else {\n        const error = result.error;\n        const statusCode = error.err_code === 'VALIDATION_ERROR' ? 400 : 500;\n        res.status(statusCode).json({\n          error: error.message,\n          err_code: error.err_code,\n          details: error.details\n        });\n      }\n    } catch (error: any) {\n      res.status(500).json({\n        error: error.message || 'Internal server error',\n        err_code: 'UNKNOWN'\n      });\n    }\n  };\n}\n\n// Vercel adapter for TTS endpoint\nexport function createVercelTTSHandler(deps: TTSDeps) {\n  return async (req: VercelRequest, res: VercelResponse) => {\n    // Set headers\n    res.setHeader('cache-control', 'no-store');\n    res.setHeader('x-handler', 'shared-core');\n\n    // Check method\n    if (req.method !== 'POST') {\n      return res.status(405).json({\n        error: 'Method not allowed',\n        err_code: 'METHOD_NOT_ALLOWED'\n      });\n    }\n\n    try {\n      const coreRequest = mapVercelTTSRequest(req);\n      const result = await handleTTS(coreRequest, deps);\n\n      if (result.ok) {\n        res.status(200).json(result.data);\n      } else {\n        const error = result.error;\n        const statusCode = error.err_code === 'VALIDATION_ERROR' ? 400 : 500;\n        res.status(statusCode).json({\n          error: error.message,\n          err_code: error.err_code,\n          details: error.details\n        });\n      }\n    } catch (error: any) {\n      res.status(500).json({\n        error: error.message || 'Internal server error',\n        err_code: 'UNKNOWN'\n      });\n    }\n  };\n}\n","// Gemini AI provider implementation\n\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport { AIProvider, Result, ImageSignals, ProviderError } from '../types/api';\n\nexport class GeminiProvider implements AIProvider {\n  private genAI: GoogleGenerativeAI;\n\n  constructor(apiKey: string) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  async inspectImage(image: Uint8Array, mimeType: string): Promise<Result<ImageSignals>> {\n    try {\n      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash-lite' });\n      \n      const prompt = `Analyze this image quickly and return ONLY a JSON object with these exact fields:\n{\n  \"has_text\": boolean (true if any readable text is visible),\n  \"hazards\": string[] (list of safety hazards like \"moving vehicle\", \"stairs\", \"obstacle\", max 3),\n  \"people_count\": number (count of people visible, 0-10+),\n  \"lighting_ok\": boolean (true if lighting is adequate for clear vision),\n  \"confidence\": number (0.0-1.0, overall confidence in analysis)\n}\n\nBe concise and accurate. Return only valid JSON.`;\n\n      const imageBase64 = Buffer.from(image).toString('base64');\n      \n      const result = await model.generateContent([\n        prompt,\n        {\n          inlineData: {\n            data: imageBase64,\n            mimeType\n          }\n        }\n      ]);\n\n      const responseText = result.response.text().trim();\n      \n      try {\n        const signals = JSON.parse(responseText);\n        return {\n          ok: true,\n          data: {\n            has_text: Boolean(signals.has_text),\n            hazards: Array.isArray(signals.hazards) ? signals.hazards.slice(0, 3).map(String) : [],\n            people_count: Math.max(0, Math.min(10, Number(signals.people_count) || 0)),\n            lighting_ok: Boolean(signals.lighting_ok),\n            confidence: Math.max(0, Math.min(1, Number(signals.confidence) || 0))\n          }\n        };\n      } catch (parseError) {\n        console.warn('Failed to parse image inspector JSON:', responseText);\n        return {\n          ok: true,\n          data: {\n            has_text: responseText.toLowerCase().includes('text'),\n            hazards: [],\n            people_count: 0,\n            lighting_ok: true,\n            confidence: 0.5\n          }\n        };\n      }\n    } catch (error: any) {\n      console.error('Image inspection failed:', error);\n      return {\n        ok: false,\n        error: {\n          message: error.message || 'Image inspection failed',\n          err_code: 'INSPECTION_ERROR',\n          details: error.toString()\n        }\n      };\n    }\n  }\n\n  async generateResponse(image: Uint8Array, mimeType: string, prompt: string): Promise<Result<string>> {\n    try {\n      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });\n      \n      const imageBase64 = Buffer.from(image).toString('base64');\n      \n      const result = await model.generateContent([\n        {\n          inlineData: {\n            data: imageBase64,\n            mimeType\n          }\n        },\n        { text: prompt }\n      ]);\n\n      const response = await result.response;\n      const text = response.text();\n\n      return {\n        ok: true,\n        data: text\n      };\n      \n    } catch (error: any) {\n      console.error('Response generation failed:', error);\n      return {\n        ok: false,\n        error: {\n          message: error.message || 'Response generation failed',\n          err_code: 'GENERATION_ERROR',\n          details: error.toString()\n        }\n      };\n    }\n  }\n}\n","// Telemetry provider implementations\n\nimport { TelemetryLogger, TelemetryData } from '../types/api';\n\n// Console-based telemetry for both Express and Vercel\nexport class ConsoleTelemetryLogger implements TelemetryLogger {\n  log(data: TelemetryData): void {\n    // Log to stdout as JSON for easy parsing\n    console.log(JSON.stringify(data));\n  }\n}\n\n// Ring buffer telemetry for Express (enables /metrics endpoint)\nexport class RingBufferTelemetryLogger implements TelemetryLogger {\n  private buffer: TelemetryData[] = [];\n  private maxSize: number;\n\n  constructor(maxSize: number = 1000) {\n    this.maxSize = maxSize;\n  }\n\n  log(data: TelemetryData): void {\n    // Add to ring buffer\n    this.buffer.push(data);\n    if (this.buffer.length > this.maxSize) {\n      this.buffer.shift();\n    }\n\n    // Also log to console\n    console.log(JSON.stringify(data));\n  }\n\n  getRecentEntries(count: number = 100): TelemetryData[] {\n    return this.buffer.slice(-count);\n  }\n\n  getMetrics(): {\n    total_calls: number;\n    success_rate: number;\n    avg_latency_ms: number;\n    p95_latency_ms: number;\n    error_breakdown: Record<string, number>;\n  } {\n    if (this.buffer.length === 0) {\n      return {\n        total_calls: 0,\n        success_rate: 0,\n        avg_latency_ms: 0,\n        p95_latency_ms: 0,\n        error_breakdown: {}\n      };\n    }\n\n    const totalCalls = this.buffer.length;\n    const successfulCalls = this.buffer.filter(entry => entry.ok).length;\n    const successRate = successfulCalls / totalCalls;\n\n    const latencies = this.buffer.map(entry => entry.total_ms).sort((a, b) => a - b);\n    const avgLatency = latencies.reduce((sum, lat) => sum + lat, 0) / latencies.length;\n    const p95Index = Math.floor(latencies.length * 0.95);\n    const p95Latency = latencies[p95Index] || 0;\n\n    const errorBreakdown: Record<string, number> = {};\n    this.buffer\n      .filter(entry => !entry.ok && entry.err_code)\n      .forEach(entry => {\n        const errCode = entry.err_code!;\n        errorBreakdown[errCode] = (errorBreakdown[errCode] || 0) + 1;\n      });\n\n    return {\n      total_calls: totalCalls,\n      success_rate: successRate,\n      avg_latency_ms: avgLatency,\n      p95_latency_ms: p95Latency,\n      error_breakdown: errorBreakdown\n    };\n  }\n}\n","// ImageStore implementations for different environments\n\nimport { ImageStore } from '../types/api';\n\n// In-memory implementation for Express server\nexport class MemoryImageStore implements ImageStore {\n  private cache = new Map<string, { buffer: Uint8Array; expires: number }>();\n  private cleanupInterval: NodeJS.Timeout;\n\n  constructor() {\n    // Cleanup expired entries every minute\n    this.cleanupInterval = setInterval(() => {\n      const now = Date.now();\n      for (const [token, entry] of this.cache.entries()) {\n        if (entry.expires < now) {\n          this.cache.delete(token);\n        }\n      }\n    }, 60000);\n  }\n\n  async save(buffer: Uint8Array, ttlMinutes: number = 5): Promise<string> {\n    const token = `img-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const expires = Date.now() + (ttlMinutes * 60 * 1000);\n    \n    this.cache.set(token, { buffer, expires });\n    return token;\n  }\n\n  async get(token: string): Promise<Uint8Array | null> {\n    const entry = this.cache.get(token);\n    if (!entry) return null;\n    \n    if (entry.expires < Date.now()) {\n      this.cache.delete(token);\n      return null;\n    }\n    \n    return entry.buffer;\n  }\n\n  destroy(): void {\n    clearInterval(this.cleanupInterval);\n    this.cache.clear();\n  }\n}\n\n// Global cache implementation for Vercel (best-effort)\nexport class GlobalImageStore implements ImageStore {\n  private static cache = new Map<string, { buffer: Uint8Array; expires: number }>();\n\n  async save(buffer: Uint8Array, ttlMinutes: number = 5): Promise<string> {\n    const token = `img-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const expires = Date.now() + (ttlMinutes * 60 * 1000);\n    \n    // Best-effort global cache (may not persist across cold starts)\n    GlobalImageStore.cache.set(token, { buffer, expires });\n    return token;\n  }\n\n  async get(token: string): Promise<Uint8Array | null> {\n    const entry = GlobalImageStore.cache.get(token);\n    if (!entry) return null;\n    \n    if (entry.expires < Date.now()) {\n      GlobalImageStore.cache.delete(token);\n      return null;\n    }\n    \n    return entry.buffer;\n  }\n}\n\n// Vercel Blob implementation (for production)\nexport class VercelBlobImageStore implements ImageStore {\n  constructor(private blobToken: string) {}\n\n  async save(buffer: Uint8Array, ttlMinutes: number = 5): Promise<string> {\n    // TODO: Implement Vercel Blob storage\n    // For now, fall back to global cache\n    const fallback = new GlobalImageStore();\n    return fallback.save(buffer, ttlMinutes);\n  }\n\n  async get(token: string): Promise<Uint8Array | null> {\n    // TODO: Implement Vercel Blob retrieval\n    // For now, fall back to global cache\n    const fallback = new GlobalImageStore();\n    return fallback.get(token);\n  }\n}\n"],"mappings":"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","names":[]}