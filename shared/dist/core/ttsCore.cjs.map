{"version":3,"sources":["../../core/ttsCore.ts"],"sourcesContent":["// Core business logic for TTS endpoint - runtime agnostic\n\nimport { \n  Result, \n  ProviderError,\n  TelemetryData\n} from '../types/api';\n\nexport interface TTSRequest {\n  sessionId: string;\n  text: string;\n  voice?: string;\n  provider?: 'gemini' | 'elevenlabs';\n  rate?: number;\n}\n\nexport interface TTSResponse {\n  audioBase64: string;\n  mimeType: string;\n  timing: {\n    processing_ms: number;\n    total_ms: number;\n  };\n}\n\nexport interface TTSDeps {\n  telemetry: {\n    log(data: TelemetryData): void;\n  };\n  now: () => number;\n  geminiApiKey?: string;\n  elevenLabsApiKey?: string;\n}\n\n// Core TTS handler - pure business logic\nexport async function handleTTS(\n  request: TTSRequest,\n  deps: TTSDeps\n): Promise<Result<TTSResponse>> {\n  const startTime = deps.now();\n  \n  try {\n    // Validate input\n    if (!request.text || request.text.trim().length === 0) {\n      const error = {\n        message: 'Text is required for TTS generation',\n        err_code: 'INVALID_TEXT'\n      };\n      \n      // Log error telemetry\n      deps.telemetry.log({\n        ts: new Date().toISOString(),\n        mode: 'tts',\n        engine: request.provider || 'gemini',\n        route_path: '/tts',\n        image_bytes: 0,\n        audio_bytes_in: 0,\n        total_ms: deps.now() - startTime,\n        model_ms: 0,\n        tts_ms: 0,\n        chars_out: 0,\n        ok: false,\n        err_code: error.err_code,\n        request_id: request.sessionId\n      });\n      \n      return { ok: false, error };\n    }\n    \n    // Generate TTS\n    const processingStart = deps.now();\n    const provider = request.provider || 'gemini';\n    \n    let audioBase64: string;\n    let mimeType: string;\n    \n    if (provider === 'gemini') {\n      const result = await generateGeminiTTS(request.text, deps.geminiApiKey);\n      if (!result.ok) {\n        return result as Result<TTSResponse>;\n      }\n      audioBase64 = result.data.audioBase64;\n      mimeType = result.data.mimeType;\n    } else if (provider === 'elevenlabs') {\n      const result = await generateElevenLabsTTS(request.text, request.voice, deps.elevenLabsApiKey);\n      if (!result.ok) {\n        return result as Result<TTSResponse>;\n      }\n      audioBase64 = result.data.audioBase64;\n      mimeType = result.data.mimeType;\n    } else {\n      const error = {\n        message: `Unsupported TTS provider: ${provider}`,\n        err_code: 'INVALID_PROVIDER'\n      };\n      \n      // Log error telemetry\n      deps.telemetry.log({\n        ts: new Date().toISOString(),\n        mode: 'tts',\n        engine: provider,\n        route_path: '/tts',\n        image_bytes: 0,\n        audio_bytes_in: 0,\n        total_ms: deps.now() - startTime,\n        model_ms: 0,\n        tts_ms: 0,\n        chars_out: 0,\n        ok: false,\n        err_code: error.err_code,\n        request_id: request.sessionId\n      });\n      \n      return { ok: false, error };\n    }\n    \n    const processingTime = deps.now() - processingStart;\n    const totalTime = deps.now() - startTime;\n    \n    // Calculate audio bytes\n    const audioBytes = Math.floor(audioBase64.length * 0.75); // Base64 overhead\n    \n    // Log successful telemetry\n    deps.telemetry.log({\n      ts: new Date().toISOString(),\n      mode: 'tts',\n      engine: provider,\n      route_path: '/tts',\n      image_bytes: 0,\n      audio_bytes_in: audioBytes,\n      total_ms: totalTime,\n      model_ms: 0,\n      tts_ms: processingTime,\n      chars_out: request.text.length,\n      ok: true,\n      request_id: request.sessionId\n    });\n    \n    return {\n      ok: true,\n      data: {\n        audioBase64,\n        mimeType,\n        timing: {\n          processing_ms: processingTime,\n          total_ms: totalTime\n        }\n      }\n    };\n    \n  } catch (error: any) {\n    const totalTime = deps.now() - startTime;\n    \n    // Log error telemetry\n    deps.telemetry.log({\n      ts: new Date().toISOString(),\n      mode: 'tts',\n      engine: request.provider || 'gemini',\n      route_path: '/tts',\n      image_bytes: 0,\n      audio_bytes_in: 0,\n      total_ms: totalTime,\n      model_ms: 0,\n      tts_ms: 0,\n      chars_out: 0,\n      ok: false,\n      err_code: error.err_code || 'UNKNOWN',\n      request_id: request.sessionId\n    });\n    \n    return {\n      ok: false,\n      error: {\n        message: error.message || 'Internal server error',\n        err_code: error.err_code || 'UNKNOWN',\n        details: error.details\n      }\n    };\n  }\n}\n\n// Gemini TTS implementation\nasync function generateGeminiTTS(text: string, apiKey?: string): Promise<Result<{audioBase64: string, mimeType: string}>> {\n  try {\n    if (!apiKey) {\n      return {\n        ok: false,\n        error: {\n          message: 'Gemini API key not configured',\n          err_code: 'MISSING_API_KEY'\n        }\n      };\n    }\n\n    const url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent';\n\n    const requestBody = {\n      contents: [{\n        parts: [{\n          text: text\n        }]\n      }],\n      generationConfig: {\n        responseModalities: [\"AUDIO\"],\n        speechConfig: {\n          voiceConfig: {\n            prebuiltVoiceConfig: {\n              voiceName: \"Kore\"\n            }\n          }\n        }\n      }\n    };\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'x-goog-api-key': apiKey\n      },\n      body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      return {\n        ok: false,\n        error: {\n          message: `Gemini TTS API error: ${response.status} ${response.statusText} - ${errorText}`,\n          err_code: 'GEMINI_TTS_API_ERROR'\n        }\n      };\n    }\n\n    const result = await response.json();\n\n    // Extract audio data from response\n    const audioBase64 = result.candidates?.[0]?.content?.parts?.[0]?.inlineData?.data;\n\n    if (!audioBase64) {\n      return {\n        ok: false,\n        error: {\n          message: 'No audio data received from Gemini TTS API',\n          err_code: 'NO_AUDIO_DATA'\n        }\n      };\n    }\n\n    return {\n      ok: true,\n      data: {\n        audioBase64,\n        mimeType: 'audio/wav' // Gemini TTS returns PCM data, which we'll treat as WAV\n      }\n    };\n  } catch (error: any) {\n    return {\n      ok: false,\n      error: {\n        message: error.message || 'Gemini TTS generation failed',\n        err_code: 'GEMINI_TTS_ERROR'\n      }\n    };\n  }\n}\n\n// ElevenLabs TTS implementation\nasync function generateElevenLabsTTS(text: string, voice?: string, apiKey?: string): Promise<Result<{audioBase64: string, mimeType: string}>> {\n  try {\n    if (!apiKey) {\n      return {\n        ok: false,\n        error: {\n          message: 'ElevenLabs API key not configured',\n          err_code: 'MISSING_API_KEY'\n        }\n      };\n    }\n\n    const voiceId = voice || 'pNInz6obpgDQGcFmaJgB'; // Default voice\n    const url = `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`;\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Accept': 'audio/mpeg',\n        'Content-Type': 'application/json',\n        'xi-api-key': apiKey\n      },\n      body: JSON.stringify({\n        text: text,\n        model_id: 'eleven_monolingual_v1',\n        voice_settings: {\n          stability: 0.5,\n          similarity_boost: 0.5\n        }\n      })\n    });\n\n    if (!response.ok) {\n      return {\n        ok: false,\n        error: {\n          message: `ElevenLabs API error: ${response.status} ${response.statusText}`,\n          err_code: 'ELEVENLABS_API_ERROR'\n        }\n      };\n    }\n\n    const audioBuffer = await response.arrayBuffer();\n    const audioBase64 = Buffer.from(audioBuffer).toString('base64');\n    \n    return {\n      ok: true,\n      data: {\n        audioBase64,\n        mimeType: 'audio/mpeg'\n      }\n    };\n  } catch (error: any) {\n    return {\n      ok: false,\n      error: {\n        message: error.message || 'ElevenLabs TTS generation failed',\n        err_code: 'ELEVENLABS_TTS_ERROR'\n      }\n    };\n  }\n}\n"],"mappings":"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","names":[]}