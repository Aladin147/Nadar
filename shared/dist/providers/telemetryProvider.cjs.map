{"version":3,"sources":["../../providers/telemetryProvider.ts"],"sourcesContent":["// Telemetry provider implementations\n\nimport { TelemetryLogger, TelemetryData } from '../types/api';\n\n// Console-based telemetry for both Express and Vercel\nexport class ConsoleTelemetryLogger implements TelemetryLogger {\n  log(data: TelemetryData): void {\n    // Log to stdout as JSON for easy parsing\n    console.log(JSON.stringify(data));\n  }\n}\n\n// Ring buffer telemetry for Express (enables /metrics endpoint)\nexport class RingBufferTelemetryLogger implements TelemetryLogger {\n  private buffer: TelemetryData[] = [];\n  private maxSize: number;\n\n  constructor(maxSize: number = 1000) {\n    this.maxSize = maxSize;\n  }\n\n  log(data: TelemetryData): void {\n    // Add to ring buffer\n    this.buffer.push(data);\n    if (this.buffer.length > this.maxSize) {\n      this.buffer.shift();\n    }\n\n    // Also log to console\n    console.log(JSON.stringify(data));\n  }\n\n  getRecentEntries(count: number = 100): TelemetryData[] {\n    return this.buffer.slice(-count);\n  }\n\n  getMetrics(): {\n    total_calls: number;\n    success_rate: number;\n    avg_latency_ms: number;\n    p95_latency_ms: number;\n    error_breakdown: Record<string, number>;\n  } {\n    if (this.buffer.length === 0) {\n      return {\n        total_calls: 0,\n        success_rate: 0,\n        avg_latency_ms: 0,\n        p95_latency_ms: 0,\n        error_breakdown: {}\n      };\n    }\n\n    const totalCalls = this.buffer.length;\n    const successfulCalls = this.buffer.filter(entry => entry.ok).length;\n    const successRate = successfulCalls / totalCalls;\n\n    const latencies = this.buffer.map(entry => entry.total_ms).sort((a, b) => a - b);\n    const avgLatency = latencies.reduce((sum, lat) => sum + lat, 0) / latencies.length;\n    const p95Index = Math.floor(latencies.length * 0.95);\n    const p95Latency = latencies[p95Index] || 0;\n\n    const errorBreakdown: Record<string, number> = {};\n    this.buffer\n      .filter(entry => !entry.ok && entry.err_code)\n      .forEach(entry => {\n        const errCode = entry.err_code!;\n        errorBreakdown[errCode] = (errorBreakdown[errCode] || 0) + 1;\n      });\n\n    return {\n      total_calls: totalCalls,\n      success_rate: successRate,\n      avg_latency_ms: avgLatency,\n      p95_latency_ms: p95Latency,\n      error_breakdown: errorBreakdown\n    };\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAM,yBAAN,MAAwD;AAAA,EAC7D,IAAI,MAA2B;AAE7B,YAAQ,IAAI,KAAK,UAAU,IAAI,CAAC;AAAA,EAClC;AACF;AAGO,IAAM,4BAAN,MAA2D;AAAA,EACxD,SAA0B,CAAC;AAAA,EAC3B;AAAA,EAER,YAAY,UAAkB,KAAM;AAClC,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,IAAI,MAA2B;AAE7B,SAAK,OAAO,KAAK,IAAI;AACrB,QAAI,KAAK,OAAO,SAAS,KAAK,SAAS;AACrC,WAAK,OAAO,MAAM;AAAA,IACpB;AAGA,YAAQ,IAAI,KAAK,UAAU,IAAI,CAAC;AAAA,EAClC;AAAA,EAEA,iBAAiB,QAAgB,KAAsB;AACrD,WAAO,KAAK,OAAO,MAAM,CAAC,KAAK;AAAA,EACjC;AAAA,EAEA,aAME;AACA,QAAI,KAAK,OAAO,WAAW,GAAG;AAC5B,aAAO;AAAA,QACL,aAAa;AAAA,QACb,cAAc;AAAA,QACd,gBAAgB;AAAA,QAChB,gBAAgB;AAAA,QAChB,iBAAiB,CAAC;AAAA,MACpB;AAAA,IACF;AAEA,UAAM,aAAa,KAAK,OAAO;AAC/B,UAAM,kBAAkB,KAAK,OAAO,OAAO,WAAS,MAAM,EAAE,EAAE;AAC9D,UAAM,cAAc,kBAAkB;AAEtC,UAAM,YAAY,KAAK,OAAO,IAAI,WAAS,MAAM,QAAQ,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC/E,UAAM,aAAa,UAAU,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,CAAC,IAAI,UAAU;AAC5E,UAAM,WAAW,KAAK,MAAM,UAAU,SAAS,IAAI;AACnD,UAAM,aAAa,UAAU,QAAQ,KAAK;AAE1C,UAAM,iBAAyC,CAAC;AAChD,SAAK,OACF,OAAO,WAAS,CAAC,MAAM,MAAM,MAAM,QAAQ,EAC3C,QAAQ,WAAS;AAChB,YAAM,UAAU,MAAM;AACtB,qBAAe,OAAO,KAAK,eAAe,OAAO,KAAK,KAAK;AAAA,IAC7D,CAAC;AAEH,WAAO;AAAA,MACL,aAAa;AAAA,MACb,cAAc;AAAA,MACd,gBAAgB;AAAA,MAChB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,IACnB;AAAA,EACF;AACF;","names":[]}