{"version":3,"sources":["../../providers/geminiProvider.ts"],"sourcesContent":["// Gemini AI provider implementation\n\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport { AIProvider, Result, ImageSignals, ProviderError } from '../types/api';\n\nexport class GeminiProvider implements AIProvider {\n  private genAI: GoogleGenerativeAI;\n\n  constructor(apiKey: string) {\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  async inspectImage(image: Uint8Array, mimeType: string): Promise<Result<ImageSignals>> {\n    try {\n      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash-lite' });\n      \n      const prompt = `Analyze this image quickly and return ONLY a JSON object with these exact fields:\n{\n  \"has_text\": boolean (true if any readable text is visible),\n  \"hazards\": string[] (list of safety hazards like \"moving vehicle\", \"stairs\", \"obstacle\", max 3),\n  \"people_count\": number (count of people visible, 0-10+),\n  \"lighting_ok\": boolean (true if lighting is adequate for clear vision),\n  \"confidence\": number (0.0-1.0, overall confidence in analysis)\n}\n\nBe concise and accurate. Return only valid JSON.`;\n\n      const imageBase64 = Buffer.from(image).toString('base64');\n      \n      const result = await model.generateContent([\n        prompt,\n        {\n          inlineData: {\n            data: imageBase64,\n            mimeType\n          }\n        }\n      ]);\n\n      const responseText = result.response.text().trim();\n      \n      try {\n        const signals = JSON.parse(responseText);\n        return {\n          ok: true,\n          data: {\n            has_text: Boolean(signals.has_text),\n            hazards: Array.isArray(signals.hazards) ? signals.hazards.slice(0, 3).map(String) : [],\n            people_count: Math.max(0, Math.min(10, Number(signals.people_count) || 0)),\n            lighting_ok: Boolean(signals.lighting_ok),\n            confidence: Math.max(0, Math.min(1, Number(signals.confidence) || 0))\n          }\n        };\n      } catch (parseError) {\n        console.warn('Failed to parse image inspector JSON:', responseText);\n        return {\n          ok: true,\n          data: {\n            has_text: responseText.toLowerCase().includes('text'),\n            hazards: [],\n            people_count: 0,\n            lighting_ok: true,\n            confidence: 0.5\n          }\n        };\n      }\n    } catch (error: any) {\n      console.error('Image inspection failed:', error);\n      return {\n        ok: false,\n        error: {\n          message: error.message || 'Image inspection failed',\n          err_code: 'INSPECTION_ERROR',\n          details: error.toString()\n        }\n      };\n    }\n  }\n\n  async generateResponse(image: Uint8Array, mimeType: string, prompt: string): Promise<Result<string>> {\n    try {\n      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });\n      \n      const imageBase64 = Buffer.from(image).toString('base64');\n      \n      const result = await model.generateContent([\n        {\n          inlineData: {\n            data: imageBase64,\n            mimeType\n          }\n        },\n        { text: prompt }\n      ]);\n\n      const response = await result.response;\n      const text = response.text();\n\n      return {\n        ok: true,\n        data: text\n      };\n      \n    } catch (error: any) {\n      console.error('Response generation failed:', error);\n      return {\n        ok: false,\n        error: {\n          message: error.message || 'Response generation failed',\n          err_code: 'GENERATION_ERROR',\n          details: error.toString()\n        }\n      };\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,2BAAmC;AAG5B,IAAM,iBAAN,MAA2C;AAAA,EACxC;AAAA,EAER,YAAY,QAAgB;AAC1B,SAAK,QAAQ,IAAI,wCAAmB,MAAM;AAAA,EAC5C;AAAA,EAEA,MAAM,aAAa,OAAmB,UAAiD;AACrF,QAAI;AACF,YAAM,QAAQ,KAAK,MAAM,mBAAmB,EAAE,OAAO,wBAAwB,CAAC;AAE9E,YAAM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWf,YAAM,cAAc,OAAO,KAAK,KAAK,EAAE,SAAS,QAAQ;AAExD,YAAM,SAAS,MAAM,MAAM,gBAAgB;AAAA,QACzC;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,MAAM;AAAA,YACN;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,YAAM,eAAe,OAAO,SAAS,KAAK,EAAE,KAAK;AAEjD,UAAI;AACF,cAAM,UAAU,KAAK,MAAM,YAAY;AACvC,eAAO;AAAA,UACL,IAAI;AAAA,UACJ,MAAM;AAAA,YACJ,UAAU,QAAQ,QAAQ,QAAQ;AAAA,YAClC,SAAS,MAAM,QAAQ,QAAQ,OAAO,IAAI,QAAQ,QAAQ,MAAM,GAAG,CAAC,EAAE,IAAI,MAAM,IAAI,CAAC;AAAA,YACrF,cAAc,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,OAAO,QAAQ,YAAY,KAAK,CAAC,CAAC;AAAA,YACzE,aAAa,QAAQ,QAAQ,WAAW;AAAA,YACxC,YAAY,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,OAAO,QAAQ,UAAU,KAAK,CAAC,CAAC;AAAA,UACtE;AAAA,QACF;AAAA,MACF,SAAS,YAAY;AACnB,gBAAQ,KAAK,yCAAyC,YAAY;AAClE,eAAO;AAAA,UACL,IAAI;AAAA,UACJ,MAAM;AAAA,YACJ,UAAU,aAAa,YAAY,EAAE,SAAS,MAAM;AAAA,YACpD,SAAS,CAAC;AAAA,YACV,cAAc;AAAA,YACd,aAAa;AAAA,YACb,YAAY;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,OAAY;AACnB,cAAQ,MAAM,4BAA4B,KAAK;AAC/C,aAAO;AAAA,QACL,IAAI;AAAA,QACJ,OAAO;AAAA,UACL,SAAS,MAAM,WAAW;AAAA,UAC1B,UAAU;AAAA,UACV,SAAS,MAAM,SAAS;AAAA,QAC1B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,OAAmB,UAAkB,QAAyC;AACnG,QAAI;AACF,YAAM,QAAQ,KAAK,MAAM,mBAAmB,EAAE,OAAO,mBAAmB,CAAC;AAEzE,YAAM,cAAc,OAAO,KAAK,KAAK,EAAE,SAAS,QAAQ;AAExD,YAAM,SAAS,MAAM,MAAM,gBAAgB;AAAA,QACzC;AAAA,UACE,YAAY;AAAA,YACV,MAAM;AAAA,YACN;AAAA,UACF;AAAA,QACF;AAAA,QACA,EAAE,MAAM,OAAO;AAAA,MACjB,CAAC;AAED,YAAM,WAAW,MAAM,OAAO;AAC9B,YAAM,OAAO,SAAS,KAAK;AAE3B,aAAO;AAAA,QACL,IAAI;AAAA,QACJ,MAAM;AAAA,MACR;AAAA,IAEF,SAAS,OAAY;AACnB,cAAQ,MAAM,+BAA+B,KAAK;AAClD,aAAO;AAAA,QACL,IAAI;AAAA,QACJ,OAAO;AAAA,UACL,SAAS,MAAM,WAAW;AAAA,UAC1B,UAAU;AAAA,UACV,SAAS,MAAM,SAAS;AAAA,QAC1B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;","names":[]}