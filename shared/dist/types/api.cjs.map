{"version":3,"sources":["../../types/api.ts"],"sourcesContent":["// Core types for shared business logic - runtime agnostic\n\n// Result type for error handling\nexport type Result<T> =\n  | { ok: true; data: T }\n  | { ok: false; error: ProviderError };\n\nexport interface ProviderError {\n  message: string;\n  err_code: string;\n  details?: string;\n}\n\nexport interface ImageSignals {\n  has_text: boolean;\n  hazards: string[];\n  people_count: number;\n  lighting_ok: boolean;\n  confidence: number;\n}\n\nexport interface GenOptions {\n  verbosity?: 'brief' | 'normal' | 'detailed';\n  language?: 'darija' | 'ar' | 'en';\n}\n\nexport interface GenResult {\n  text: string;\n  timings?: { prep?: number; model?: number; total?: number };\n  tokens?: { input?: number; output?: number };\n  structured?: {\n    immediate?: string;\n    objects?: string[];\n    navigation?: string;\n    paragraph?: string;\n    details?: string[];\n    has_text_content?: boolean;\n  };\n}\n\nexport interface TTSResult {\n  audioBase64: string;\n  mimeType?: string;\n}\n\n// Core request types (runtime-agnostic)\nexport interface AssistRequest {\n  sessionId: string;\n  image?: Uint8Array;\n  imageRef?: string;\n  question?: string;\n  language?: 'darija' | 'ar' | 'en';\n  verbosity?: 'brief' | 'normal' | 'detailed';\n}\n\nexport interface DescribeRequest {\n  imageBase64: string;\n  mimeType?: string;\n  options?: GenOptions;\n  sessionId?: string;\n}\n\nexport interface OCRRequest {\n  imageBase64: string;\n  mimeType?: string;\n  options?: GenOptions;\n  full?: boolean;\n}\n\nexport interface QARequest {\n  imageBase64: string;\n  question: string;\n  mimeType?: string;\n  options?: GenOptions;\n}\n\nexport interface TTSRequest {\n  text: string;\n  voice?: string;\n  provider?: 'gemini' | 'elevenlabs';\n  rate?: number;\n}\n\n// Core response types\nexport interface AssistResponse {\n  speak: string;\n  details?: string[];\n  signals: ImageSignals;\n  followup_suggest?: string[];\n  followupToken?: string;\n  timing: {\n    inspection_ms: number;\n    processing_ms: number;\n    total_ms: number;\n  };\n}\n\nexport interface StandardResponse {\n  text: string;\n  timings?: { modelMs: number };\n  tokens?: { input: number; output: number };\n}\n\n// Error types\nexport interface ErrorResponse {\n  error: string;\n  err_code: string;\n  details?: string;\n}\n\n// Telemetry types\nexport interface TelemetryData {\n  ts: string;\n  mode: 'describe' | 'ocr' | 'qa' | 'tts' | 'assist';\n  engine?: string;\n  route_path: string;\n  image_bytes: number;\n  audio_bytes_in: number;\n  total_ms: number;\n  model_ms: number;\n  tts_ms: number;\n  chars_out?: number;\n  signals?: ImageSignals;\n  ok: boolean;\n  err_code?: string | null;\n  model_name?: string;\n  provider_name?: string;\n  remote_addr?: string;\n  user_agent?: string;\n  request_id?: string;\n}\n\n// Dependency injection interfaces\nexport interface ImageStore {\n  save(buffer: Uint8Array, ttlMinutes?: number): Promise<string>;\n  get(token: string): Promise<Uint8Array | null>;\n}\n\nexport interface AIProvider {\n  inspectImage(image: Uint8Array, mimeType: string): Promise<Result<ImageSignals>>;\n  generateResponse(image: Uint8Array, mimeType: string, prompt: string): Promise<Result<string>>;\n}\n\nexport interface TelemetryLogger {\n  log(data: TelemetryData): void;\n}\n\nexport interface AssistDeps {\n  providers: AIProvider;\n  telemetry: TelemetryLogger;\n  imageStore: ImageStore;\n  now: () => number;\n}\n\n// Environment context\nexport interface RequestContext {\n  route_path: string;\n  remote_addr?: string;\n  user_agent?: string;\n  request_id?: string;\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}