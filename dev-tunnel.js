#!/usr/bin/env node

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('🚀 Starting Nadar Development Pipeline with Tunnel...\n');

let ngrokProcess = null;
let serverProcess = null;
let expoProcess = null;

// Cleanup function
function cleanup() {
  console.log('\n🧹 Cleaning up processes...');
  if (ngrokProcess) {
    ngrokProcess.kill();
    console.log('✅ ngrok stopped');
  }
  if (serverProcess) {
    serverProcess.kill();
    console.log('✅ Server stopped');
  }
  if (expoProcess) {
    expoProcess.kill();
    console.log('✅ Expo stopped');
  }
  process.exit(0);
}

// Handle cleanup on exit
process.on('SIGINT', cleanup);
process.on('SIGTERM', cleanup);

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function waitForNgrokUrl() {
  console.log('🔍 Checking ngrok API for tunnel URL...');

  for (let i = 0; i < 60; i++) { // Increased attempts
    try {
      // Use node-fetch or built-in fetch (Node 18+)
      const fetch = globalThis.fetch || require('node-fetch');
      const response = await fetch('http://localhost:4040/api/tunnels');

      if (!response.ok) {
        console.log(`⏳ Attempt ${i + 1}/60 - ngrok API not ready (${response.status})`);
        await sleep(1000);
        continue;
      }

      const data = await response.json();
      console.log(`📡 Found ${data.tunnels?.length || 0} tunnels`);

      if (data.tunnels && data.tunnels.length > 0) {
        // Look for tunnel pointing to port 4000 (could be localhost:4000 or http://localhost:4000)
        const tunnel = data.tunnels.find(t =>
          t.config.addr === 'localhost:4000' ||
          t.config.addr === 'http://localhost:4000' ||
          t.config.addr.includes(':4000')
        );

        if (tunnel) {
          console.log(`🎯 Found tunnel: ${tunnel.public_url} -> ${tunnel.config.addr}`);
          return tunnel.public_url;
        }

        // Show available tunnels for debugging
        console.log('Available tunnels:', data.tunnels.map(t => `${t.public_url} -> ${t.config.addr}`));
      }
    } catch (error) {
      if (i % 10 === 0) { // Show error every 10 attempts
        console.log(`⏳ Attempt ${i + 1}/60 - waiting for ngrok API...`);
      }
    }

    await sleep(1000);
  }

  throw new Error('Failed to get ngrok URL after 60 seconds. Make sure ngrok is installed and working.');
}

function updateAppConfig(ngrokUrl) {
  console.log(`📝 Updating app configuration to use: ${ngrokUrl}`);
  
  const envPath = path.join(__dirname, 'app', '.env');
  const envContent = `# Auto-generated by dev-tunnel.js
EXPO_PUBLIC_API_BASE=${ngrokUrl}
`;
  
  fs.writeFileSync(envPath, envContent);
  console.log('✅ App configuration updated');
}

async function startNgrok() {
  console.log('🌐 Starting ngrok tunnel...');

  ngrokProcess = spawn('ngrok', ['http', '4000'], {
    stdio: ['ignore', 'pipe', 'pipe']
  });

  let ngrokReady = false;

  ngrokProcess.stdout.on('data', (data) => {
    const output = data.toString();
    console.log('ngrok:', output.trim());
    if (output.includes('started tunnel') || output.includes('Tunnel Status')) {
      ngrokReady = true;
    }
  });

  ngrokProcess.stderr.on('data', (data) => {
    console.log('ngrok error:', data.toString().trim());
  });

  // Give ngrok more time to start
  console.log('⏳ Waiting for ngrok to initialize...');
  await sleep(8000); // Increased wait time

  // Wait for ngrok to be ready and get the URL
  const ngrokUrl = await waitForNgrokUrl();
  console.log(`✅ ngrok tunnel ready: ${ngrokUrl}`);

  return ngrokUrl;
}

function startServer() {
  console.log('🖥️  Starting server...');
  
  serverProcess = spawn('npm', ['run', 'dev'], {
    cwd: path.join(__dirname, 'server'),
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  serverProcess.stdout.on('data', (data) => {
    const output = data.toString();
    if (output.includes('listening on')) {
      console.log('✅ Server started successfully');
    }
    // Only show important server logs
    if (output.includes('✅') || output.includes('❌') || output.includes('listening')) {
      console.log('SERVER:', output.trim());
    }
  });
  
  serverProcess.stderr.on('data', (data) => {
    const error = data.toString();
    if (!error.includes('ValidationError') && !error.includes('trust proxy')) {
      console.log('SERVER ERROR:', error.trim());
    }
  });
}

function startExpo() {
  console.log('📱 Starting Expo with tunnel...');
  
  expoProcess = spawn('npx', ['expo', 'start', '--tunnel'], {
    cwd: path.join(__dirname, 'app'),
    stdio: ['ignore', 'pipe', 'pipe'],
    env: { ...process.env, FORCE_COLOR: '1' }
  });
  
  expoProcess.stdout.on('data', (data) => {
    const output = data.toString();
    console.log('EXPO:', output.trim());
  });
  
  expoProcess.stderr.on('data', (data) => {
    console.log('EXPO ERROR:', data.toString().trim());
  });
}

async function checkNgrok() {
  return new Promise((resolve) => {
    exec('ngrok version', (error, stdout, stderr) => {
      if (error) {
        console.log('❌ ngrok not found. Please install ngrok:');
        console.log('   1. Download from https://ngrok.com/download');
        console.log('   2. Or install via: npm install -g ngrok');
        console.log('   3. Or install via: choco install ngrok');
        resolve(false);
      } else {
        console.log('✅ ngrok found:', stdout.trim());
        resolve(true);
      }
    });
  });
}

async function main() {
  try {
    // Step 0: Check if ngrok is installed
    const ngrokAvailable = await checkNgrok();
    if (!ngrokAvailable) {
      process.exit(1);
    }

    // Step 1: Start ngrok and get URL
    const ngrokUrl = await startNgrok();
    
    // Step 2: Update app configuration
    updateAppConfig(ngrokUrl);
    
    // Step 3: Start server
    startServer();
    await sleep(3000); // Give server time to start
    
    // Step 4: Start Expo
    startExpo();
    
    console.log('\n🎉 Development pipeline ready!');
    console.log('📋 Summary:');
    console.log(`   🌐 Server tunnel: ${ngrokUrl}`);
    console.log('   🖥️  Server: Running on localhost:4000');
    console.log('   📱 Expo: Starting with tunnel mode');
    console.log('\n⏳ Wait for Expo QR code to appear, then scan to test!');
    console.log('💡 Press Ctrl+C to stop all services\n');
    
  } catch (error) {
    console.error('❌ Failed to start development pipeline:', error.message);
    cleanup();
  }
}

main();
