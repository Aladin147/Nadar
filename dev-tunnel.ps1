# Nadar Development Pipeline with ngrok
Write-Host "üöÄ Starting Nadar Development Pipeline with ngrok..." -ForegroundColor Green
Write-Host ""

# Function to cleanup processes
function Cleanup {
    Write-Host "üßπ Cleaning up processes..." -ForegroundColor Yellow
    
    # Stop ngrok
    Get-Process -Name "ngrok" -ErrorAction SilentlyContinue | Stop-Process -Force
    
    # Stop node processes (server and expo)
    Get-Process -Name "node" -ErrorAction SilentlyContinue | Where-Object { 
        $_.ProcessName -eq "node" 
    } | Stop-Process -Force
    
    Write-Host "‚úÖ All processes stopped" -ForegroundColor Green
    exit
}

# Handle Ctrl+C
$null = Register-EngineEvent PowerShell.Exiting -Action { Cleanup }

try {
    # Step 1: Start ngrok
    Write-Host "üåê Starting ngrok tunnel..." -ForegroundColor Cyan
    $ngrokJob = Start-Job -ScriptBlock { ngrok http 4000 }
    
    # Wait for ngrok to start
    Write-Host "‚è≥ Waiting for ngrok to initialize..." -ForegroundColor Yellow
    Start-Sleep -Seconds 5
    
    # Step 2: Get ngrok URL
    Write-Host "üìù Getting ngrok URL..." -ForegroundColor Cyan
    $maxAttempts = 10
    $ngrokUrl = $null
    
    for ($i = 1; $i -le $maxAttempts; $i++) {
        try {
            $response = Invoke-RestMethod -Uri "http://localhost:4040/api/tunnels" -Method Get
            $tunnel = $response.tunnels | Where-Object { $_.config.addr -eq "localhost:4000" }
            
            if ($tunnel) {
                $ngrokUrl = $tunnel.public_url
                Write-Host "‚úÖ ngrok URL: $ngrokUrl" -ForegroundColor Green
                break
            }
        }
        catch {
            Write-Host "‚è≥ Attempt $i/$maxAttempts - waiting for ngrok..." -ForegroundColor Yellow
            Start-Sleep -Seconds 2
        }
    }
    
    if (-not $ngrokUrl) {
        throw "Could not get ngrok URL after $maxAttempts attempts"
    }
    
    # Step 3: Update app configuration
    Write-Host "üìù Updating app configuration..." -ForegroundColor Cyan
    $envContent = "# Auto-generated by dev-tunnel.ps1`nEXPO_PUBLIC_API_BASE=$ngrokUrl`n"
    Set-Content -Path "app\.env" -Value $envContent
    Write-Host "‚úÖ App configuration updated" -ForegroundColor Green
    
    # Step 4: Start server
    Write-Host "üñ•Ô∏è  Starting server..." -ForegroundColor Cyan
    $serverJob = Start-Job -ScriptBlock { 
        Set-Location "server"
        npm run dev 
    }
    
    Start-Sleep -Seconds 3
    
    # Step 5: Start Expo
    Write-Host "üì± Starting Expo with tunnel..." -ForegroundColor Cyan
    $expoJob = Start-Job -ScriptBlock { 
        Set-Location "app"
        npx expo start --tunnel 
    }
    
    # Display summary
    Write-Host ""
    Write-Host "üéâ Development pipeline ready!" -ForegroundColor Green
    Write-Host "üìã Summary:" -ForegroundColor White
    Write-Host "   üåê Server tunnel: $ngrokUrl" -ForegroundColor White
    Write-Host "   üñ•Ô∏è  Server: Running on localhost:4000" -ForegroundColor White
    Write-Host "   üì± Expo: Starting with tunnel mode" -ForegroundColor White
    Write-Host ""
    Write-Host "‚è≥ Wait for Expo QR code to appear, then scan to test!" -ForegroundColor Yellow
    Write-Host "üí° Press Ctrl+C to stop all services" -ForegroundColor Yellow
    Write-Host ""
    
    # Keep script running and show job outputs
    while ($true) {
        # Show server output
        $serverOutput = Receive-Job -Job $serverJob -Keep
        if ($serverOutput) {
            $serverOutput | ForEach-Object { 
                if ($_ -match "listening|‚úÖ|‚ùå") {
                    Write-Host "SERVER: $_" -ForegroundColor Blue
                }
            }
        }
        
        # Show expo output
        $expoOutput = Receive-Job -Job $expoJob -Keep
        if ($expoOutput) {
            $expoOutput | ForEach-Object { 
                if ($_ -match "QR|Metro|Tunnel|exp://") {
                    Write-Host "EXPO: $_" -ForegroundColor Magenta
                }
            }
        }
        
        Start-Sleep -Seconds 2
    }
}
catch {
    Write-Host "‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    Cleanup
}
