version: '3.8'

services:
  # Nadar Server - AI Vision and TTS API
  nadar-server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: nadar-server
    restart: unless-stopped
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - GEMINI_TIMEOUT_MS=${GEMINI_TIMEOUT_MS:-30000}
      - GEMINI_TTS_TIMEOUT_MS=${GEMINI_TTS_TIMEOUT_MS:-20000}
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - nadar-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nadar-server.rule=Host(`api.nadar.local`)"
      - "traefik.http.services.nadar-server.loadbalancer.server.port=4000"

  # Nadar App - Web Frontend
  nadar-app:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: nadar-app
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      nadar-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - nadar-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nadar-app.rule=Host(`nadar.local`)"
      - "traefik.http.services.nadar-app.loadbalancer.server.port=80"

  # Reverse Proxy (Optional - for production)
  traefik:
    image: traefik:v2.10
    container_name: nadar-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    networks:
      - nadar-network
    profiles:
      - production

  # Redis Cache (Optional - for scaling)
  redis:
    image: redis:7-alpine
    container_name: nadar-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nadar-network
    profiles:
      - scaling

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: nadar-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - nadar-network
    profiles:
      - monitoring

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: nadar-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - nadar-network
    profiles:
      - monitoring

networks:
  nadar-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  traefik-letsencrypt:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
